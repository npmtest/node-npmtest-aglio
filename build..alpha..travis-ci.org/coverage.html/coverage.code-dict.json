{"/home/travis/build/npmtest/node-npmtest-aglio/test.js":"/* istanbul instrument in package npmtest_aglio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aglio/lib.npmtest_aglio.js":"/* istanbul instrument in package npmtest_aglio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_aglio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_aglio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-aglio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-aglio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_aglio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_aglio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_aglio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_aglio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_aglio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_aglio.__dirname + '/lib.npmtest_aglio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio/lib/main.js":"(function() {\n  var INCLUDE, LEGACY_TEMPLATES, ROOT, benchmark, drafter, errMsg, fs, includeDirective, includeReplace, path,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  fs = require('fs');\n\n  path = require('path');\n\n  drafter = require('drafter');\n\n  INCLUDE = /( *)<!-- include\\((.*)\\) -->/gmi;\n\n  ROOT = path.dirname(__dirname);\n\n  LEGACY_TEMPLATES = ['default', 'default-collapsed', 'flatly', 'flatly-collapsed', 'slate', 'slate-collapsed', 'cyborg', 'cyborg-collapsed'];\n\n  benchmark = {\n    start: function(message) {\n      if (process.env.BENCHMARK) {\n        return console.time(message);\n      }\n    },\n    end: function(message) {\n      if (process.env.BENCHMARK) {\n        return console.timeEnd(message);\n      }\n    }\n  };\n\n  errMsg = function(message, err) {\n    err.message = message + \": \" + err.message;\n    return err;\n  };\n\n  includeReplace = function(includePath, match, spaces, filename) {\n    var content, fullPath, lines;\n    fullPath = path.join(includePath, filename);\n    lines = fs.readFileSync(fullPath, 'utf-8').replace(/\\r\\n?/g, '\\n').split('\\n');\n    content = spaces + lines.join(\"\\n\" + spaces);\n    return includeDirective(path.dirname(fullPath), content);\n  };\n\n  includeDirective = function(includePath, input) {\n    return input.replace(INCLUDE, includeReplace.bind(this, includePath));\n  };\n\n  exports.collectPathsSync = function(input, includePath) {\n    var paths;\n    paths = [];\n    input.replace(INCLUDE, function(match, spaces, filename) {\n      var content, fullPath;\n      fullPath = path.join(includePath, filename);\n      paths.push(fullPath);\n      content = fs.readFileSync(fullPath, 'utf-8');\n      return paths = paths.concat(exports.collectPathsSync(content, path.dirname(fullPath)));\n    });\n    return paths;\n  };\n\n  exports.getTheme = function(name) {\n    if (!name || indexOf.call(LEGACY_TEMPLATES, name) >= 0) {\n      name = 'olio';\n    }\n    return require(\"aglio-theme-\" + name);\n  };\n\n  exports.render = function(input, options, done) {\n    var filteredInput, ref, variables;\n    if (typeof options === 'string' || options instanceof String) {\n      options = {\n        theme: options\n      };\n    }\n    if (options.filterInput == null) {\n      options.filterInput = true;\n    }\n    if (options.includePath == null) {\n      options.includePath = process.cwd();\n    }\n    if (options.theme == null) {\n      options.theme = 'default';\n    }\n    if (options.template) {\n      options.theme = options.template;\n    }\n    if (fs.existsSync(options.theme)) {\n      console.log(\"Setting theme to olio and layout to \" + options.theme);\n      options.themeLayout = options.theme;\n      options.theme = 'olio';\n    } else if (options.theme !== 'default' && (ref = options.theme, indexOf.call(LEGACY_TEMPLATES, ref) >= 0)) {\n      variables = options.theme.split('-')[0];\n      console.log(\"Setting theme to olio and variables to \" + variables);\n      options.themeVariables = variables;\n      options.theme = 'olio';\n    }\n    input = includeDirective(options.includePath, input);\n    filteredInput = !options.filterInput ? input : input.replace(/\\r\\n?/g, '\\n').replace(/\\t/g, '    ');\n    benchmark.start('parse');\n    return drafter.parse(filteredInput, {\n      type: 'ast'\n    }, function(err, res) {\n      var f, i, len, name, option, ref1, theme, words;\n      benchmark.end('parse');\n      if (err) {\n        err.input = input;\n        return done(errMsg('Error parsing input', err));\n      }\n      try {\n        theme = exports.getTheme(options.theme);\n      } catch (_error) {\n        err = _error;\n        return done(errMsg('Error getting theme', err));\n      }\n      ref1 = theme.getConfig().options || [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        option = ref1[i];\n        words = (function() {\n          var j, len1, ref2, results;\n          ref2 = option.name.split('-');\n          results = [];\n          for (j = 0, len1 = ref2.length; j < len1; j++) {\n            f = ref2[j];\n            results.push(f[0].toUpperCase() + f.slice(1));\n          }\n          return results;\n        })();\n        name = \"theme\" + (words.join(''));\n        if (options[name] == null) {\n          options[name] = option[\"default\"];\n        }\n      }\n      benchmark.start('render-total');\n      return theme.render(res.ast, options, function(err, html) {\n        benchmark.end('render-total');\n        if (err) {\n          return done(err);\n        }\n        res.warnings.input = filteredInput;\n        return done(null, html, res.warnings);\n      });\n    });\n  };\n\n  exports.renderFile = function(inputFile, outputFile, options, done) {\n    var render;\n    render = function(input) {\n      return exports.render(input, options, function(err, html, warnings) {\n        if (err) {\n          return done(err);\n        }\n        if (outputFile !== '-') {\n          return fs.writeFile(outputFile, html, function(err) {\n            return done(err, warnings);\n          });\n        } else {\n          console.log(html);\n          return done(null, warnings);\n        }\n      });\n    };\n    if (inputFile !== '-') {\n      if (options.includePath == null) {\n        options.includePath = path.dirname(inputFile);\n      }\n      return fs.readFile(inputFile, {\n        encoding: 'utf-8'\n      }, function(err, input) {\n        if (err) {\n          return done(errMsg('Error reading input', err));\n        }\n        return render(input.toString());\n      });\n    } else {\n      process.stdin.setEncoding('utf-8');\n      return process.stdin.on('readable', function() {\n        var chunk;\n        chunk = process.stdin.read();\n        if (chunk != null) {\n          return render(chunk);\n        }\n      });\n    }\n  };\n\n  exports.compileFile = function(inputFile, outputFile, done) {\n    var compile;\n    compile = function(input) {\n      var compiled;\n      compiled = includeDirective(path.dirname(inputFile), input);\n      if (outputFile !== '-') {\n        return fs.writeFile(outputFile, compiled, function(err) {\n          return done(err);\n        });\n      } else {\n        console.log(compiled);\n        return done(null);\n      }\n    };\n    if (inputFile !== '-') {\n      return fs.readFile(inputFile, {\n        encoding: 'utf-8'\n      }, function(err, input) {\n        if (err) {\n          return done(errMsg('Error writing output', err));\n        }\n        return compile(input.toString());\n      });\n    } else {\n      process.stdin.setEncoding('utf-8');\n      return process.stdin.on('readable', function() {\n        var chunk;\n        chunk = process.stdin.read();\n        if (chunk != null) {\n          return compile(chunk);\n        }\n      });\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio/bin/aglio.js":"#!/usr/bin/env node\n\nprocess.title = 'aglio';\n\nrequire('../lib/bin').run(null, function(err){\n\tif(err){\n\t\tprocess.exit(1);\n\t}\n});\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio/lib/bin.js":"(function() {\n  var PrettyError, aglio, cErr, cWarn, chokidar, clc, fs, getErrContext, getLineNo, http, logError, logWarnings, parser, path, serveStatic;\n\n  aglio = require('./main');\n\n  chokidar = require('chokidar');\n\n  clc = require('cli-color');\n\n  fs = require('fs');\n\n  http = require('http');\n\n  path = require('path');\n\n  PrettyError = require('pretty-error');\n\n  serveStatic = require('serve-static');\n\n  parser = require('yargs').usage('Usage: $0 [options] -i infile [-o outfile -s]').example('$0 -i example.apib -o output.html', 'Render to HTML').example('$0 -i example.apib -s', 'Start preview server').example('$0 --theme-variables flatly -i example.apib -s', 'Theme colors').example('$0 --no-theme-condense-nav -i example.apib -s', 'Disable options').options('i', {\n    alias: 'input',\n    describe: 'Input file'\n  }).options('o', {\n    alias: 'output',\n    describe: 'Output file'\n  }).options('t', {\n    alias: 'theme',\n    describe: 'Theme name or layout file',\n    \"default\": 'default'\n  }).options('f', {\n    alias: 'filter',\n    boolean: true,\n    describe: 'Sanitize input from Windows',\n    \"default\": true\n  }).options('s', {\n    alias: 'server',\n    describe: 'Start a local live preview server'\n  }).options('h', {\n    alias: 'host',\n    describe: 'Address to bind local preview server to',\n    \"default\": '127.0.0.1'\n  }).options('p', {\n    alias: 'port',\n    describe: 'Port for local preview server',\n    \"default\": 3000\n  }).options('v', {\n    alias: 'version',\n    describe: 'Display version number',\n    \"default\": false\n  }).options('c', {\n    alias: 'compile',\n    describe: 'Compile the blueprint file',\n    \"default\": false\n  }).options('n', {\n    alias: 'include-path',\n    describe: 'Base directory for relative includes'\n  }).options('verbose', {\n    describe: 'Show verbose information and stack traces',\n    \"default\": false\n  }).epilog('See https://github.com/danielgtaylor/aglio#readme for more information');\n\n  cErr = clc.white.bgRed;\n\n  cWarn = clc.xterm(214).bgXterm(235);\n\n  getErrContext = function(input, lineNo) {\n    var context, inputLines;\n    inputLines = input.split('\\n');\n    context = inputLines.slice(lineNo - 5, lineNo + 5);\n    return context.map(function(line, index) {\n      if (index === 4) {\n        return cWarn(\">>>>   \" + line);\n      } else {\n        return \"       \" + line;\n      }\n    });\n  };\n\n  getLineNo = function(input, err) {\n    if (err.location && err.location.length) {\n      return input.substr(0, err.location[0].index).split('\\n').length;\n    }\n  };\n\n  logWarnings = function(warnings) {\n    var errContext, i, len, lineNo, ref, results, warning;\n    ref = warnings || [];\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      warning = ref[i];\n      lineNo = getLineNo(warnings.input, warning) || 0;\n      errContext = getErrContext(warnings.input, lineNo);\n      console.error(cWarn(\">> Line \" + lineNo + \":\") + (\" \" + warning.message + \" (warning code \" + warning.code + \")\"));\n      console.error(cWarn(\">> Context\"));\n      results.push(console.error(\"       ...\\n \" + (errContext.join('\\n')) + \" \\n       ...\"));\n    }\n    return results;\n  };\n\n  logError = function(err, verbose) {\n    var pe;\n    if (verbose) {\n      pe = new PrettyError();\n      pe.setMaxItems(5);\n      return console.error(pe.render(err));\n    } else {\n      return console.error(cErr('>>'), err);\n    }\n  };\n\n  exports.run = function(argv, done) {\n    var _html, config, entry, err, getHtml, i, io, len, paths, ref, sendHtml, server, theme, watcher;\n    if (argv == null) {\n      argv = parser.argv;\n    }\n    if (done == null) {\n      done = function() {};\n    }\n    _html = null;\n    getHtml = function(cb) {\n      if (_html) {\n        return cb && cb(null, _html);\n      } else {\n        return fs.readFile(argv.i, \"utf-8\", function(err, blueprint) {\n          console.log(\"Rendering \" + argv.i);\n          return aglio.render(blueprint, argv, function(err, html, warnings) {\n            logWarnings(warnings);\n            if (err) {\n              logError(err, argv.verbose);\n              return cb && cb(err);\n            } else {\n              _html = html;\n              return cb && cb(null, _html);\n            }\n          });\n        });\n      }\n    };\n    if (argv.version) {\n      console.log(\"aglio \" + (require('../package.json').version));\n      console.log(\"olio \" + (require('aglio-theme-olio/package.json').version));\n      return done();\n    }\n    if (argv.template) {\n      argv.theme = argv.template;\n    }\n    if (fs.existsSync(argv.theme)) {\n      argv.themeTemplate = argv.theme;\n      argv.theme = 'default';\n    }\n    if (argv.verbose) {\n      console.log(\"Loading theme \" + argv.theme);\n    }\n    try {\n      theme = aglio.getTheme(argv.theme);\n    } catch (_error) {\n      err = _error;\n      err.message = \"Could not load theme: \" + err.message;\n      logError(err, argv.verbose);\n      return done(err);\n    }\n    config = theme.getConfig();\n    ref = config.options;\n    for (i = 0, len = ref.length; i < len; i++) {\n      entry = ref[i];\n      parser.options(\"theme-\" + entry.name, entry);\n    }\n    if (argv.s) {\n      if (!argv.i) {\n        parser.showHelp();\n        return done('Invalid arguments');\n      }\n      argv.locals = {\n        livePreview: true\n      };\n      if (argv.i !== '-') {\n        argv.includePath = path.dirname(argv.i);\n      }\n      getHtml();\n      server = http.createServer(function(req, res) {\n        var serve;\n        if (req.url !== '/') {\n          serve = serveStatic(path.dirname(argv.i));\n          return serve(req, res, function() {\n            return res.end();\n          });\n        }\n        return getHtml(function(err, html) {\n          res.writeHead(200, {\n            \"Content-Type\": \"text/html\"\n          });\n          return res.end((err ? err.toString() : html));\n        });\n      }).listen(argv.p, argv.h, function() {\n        return console.log(\"Server started on http://\" + argv.h + \":\" + argv.p + \"/\");\n      });\n      sendHtml = function(socket) {\n        return getHtml(function(err, html) {\n          var re;\n          if (!err) {\n            console.log(\"Refresh web page in browser\");\n            re = /<body.*?>[^]*<\\/body>/gi;\n            html = html.match(re)[0];\n            return socket.emit(\"refresh\", html);\n          }\n        });\n      };\n      io = require(\"socket.io\")(server);\n      io.on(\"connection\", function(socket) {\n        console.log(\"Socket connected\");\n        return socket.on('request-refresh', function() {\n          return sendHtml(socket);\n        });\n      });\n      paths = aglio.collectPathsSync(fs.readFileSync(argv.i, 'utf-8'), path.dirname(argv.i));\n      watcher = chokidar.watch([argv.i].concat(paths));\n      watcher.on(\"change\", function(path) {\n        console.log(\"Updated \" + path);\n        _html = null;\n        return sendHtml(io);\n      });\n      return done();\n    } else {\n      if (!argv.i || !argv.o) {\n        parser.showHelp();\n        return done('Invalid arguments');\n      }\n      if (argv.c || (typeof argv.o === 'string' && (argv.o.match(/\\.apib$/ || argv.o.match(/\\.md$/))))) {\n        return aglio.compileFile(argv.i, argv.o, function(err) {\n          if (err) {\n            logError(err, argv.verbose);\n          }\n          return done();\n        });\n      } else {\n        return aglio.renderFile(argv.i, argv.o, argv, function(err, warnings) {\n          var lineNo;\n          if (err) {\n            lineNo = getLineNo(err.input, err);\n            if (lineNo != null) {\n              console.error(cErr(\">> Line \" + lineNo + \":\") + (\" \" + err.message + \" (error code \" + err.code + \")\"));\n            } else {\n              logError(err, argv.verbose);\n            }\n            return done(err);\n          }\n          logWarnings(warnings);\n          return done();\n        });\n      }\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio-theme-olio/lib/main.js":"// Generated by CoffeeScript 1.9.3\n(function() {\n  var ROOT, benchmark, cache, compileTemplate, crypto, decorate, errMsg, fs, getCached, getCss, getTemplate, highlight, hljs, jade, less, markdownIt, modifyUriTemplate, moment, path, querystring, renderExample, renderSchema, sha1, slug;\n\n  crypto = require('crypto');\n\n  fs = require('fs');\n\n  hljs = require('highlight.js');\n\n  jade = require('jade');\n\n  less = require('less');\n\n  markdownIt = require('markdown-it');\n\n  moment = require('moment');\n\n  path = require('path');\n\n  querystring = require('querystring');\n\n  renderExample = require('./example');\n\n  renderSchema = require('./schema');\n\n  ROOT = path.dirname(__dirname);\n\n  cache = {};\n\n  benchmark = {\n    start: function(message) {\n      if (process.env.BENCHMARK) {\n        return console.time(message);\n      }\n    },\n    end: function(message) {\n      if (process.env.BENCHMARK) {\n        return console.timeEnd(message);\n      }\n    }\n  };\n\n  errMsg = function(message, err) {\n    err.message = message + \": \" + err.message;\n    return err;\n  };\n\n  sha1 = function(value) {\n    return crypto.createHash('sha1').update(value.toString()).digest('hex');\n  };\n\n  slug = function(cache, value, unique) {\n    var sluggified;\n    if (cache == null) {\n      cache = {};\n    }\n    if (value == null) {\n      value = '';\n    }\n    if (unique == null) {\n      unique = false;\n    }\n    sluggified = value.toLowerCase().replace(/[ \\t\\n\\\\<>\"'=:\\/]/g, '-').replace(/-+/g, '-').replace(/^-/, '');\n    if (unique) {\n      while (cache[sluggified]) {\n        if (sluggified.match(/\\d+$/)) {\n          sluggified = sluggified.replace(/\\d+$/, function(value) {\n            return parseInt(value) + 1;\n          });\n        } else {\n          sluggified = sluggified + '-1';\n        }\n      }\n    }\n    cache[sluggified] = true;\n    return sluggified;\n  };\n\n  highlight = function(code, lang, subset) {\n    var response;\n    benchmark.start(\"highlight \" + lang);\n    response = (function() {\n      switch (lang) {\n        case 'no-highlight':\n          return code;\n        case void 0:\n        case null:\n        case '':\n          return hljs.highlightAuto(code, subset).value;\n        default:\n          return hljs.highlight(lang, code).value;\n      }\n    })();\n    benchmark.end(\"highlight \" + lang);\n    return response.trim();\n  };\n\n  getCached = function(key, compiledPath, sources, load, done) {\n    var compiledStats, err, i, len, loadErr, source, sourceStats;\n    if (process.env.NOCACHE) {\n      return done(null);\n    }\n    if (cache[key]) {\n      return done(null, cache[key]);\n    }\n    try {\n      if (fs.existsSync(compiledPath)) {\n        compiledStats = fs.statSync(compiledPath);\n        for (i = 0, len = sources.length; i < len; i++) {\n          source = sources[i];\n          sourceStats = fs.statSync(source);\n          if (sourceStats.mtime > compiledStats.mtime) {\n            return done(null);\n          }\n        }\n        try {\n          return load(compiledPath, function(err, item) {\n            if (err) {\n              return done(errMsg('Error loading cached resource', err));\n            }\n            cache[key] = item;\n            return done(null, cache[key]);\n          });\n        } catch (_error) {\n          loadErr = _error;\n          return done(errMsg('Error loading cached resource', loadErr));\n        }\n      } else {\n        return done(null);\n      }\n    } catch (_error) {\n      err = _error;\n      return done(err);\n    }\n  };\n\n  getCss = function(variables, styles, verbose, done) {\n    var compiledPath, customPath, defaultVariablePath, i, item, j, key, len, len1, load, sources, stylePaths, variablePaths;\n    key = \"css-\" + variables + \"-\" + styles;\n    if (cache[key]) {\n      return done(null, cache[key]);\n    }\n    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + \".css\");\n    defaultVariablePath = path.join(ROOT, 'styles', 'variables-default.less');\n    sources = [defaultVariablePath];\n    if (!Array.isArray(variables)) {\n      variables = [variables];\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    variablePaths = [defaultVariablePath];\n    for (i = 0, len = variables.length; i < len; i++) {\n      item = variables[i];\n      if (item !== 'default') {\n        customPath = path.join(ROOT, 'styles', \"variables-\" + item + \".less\");\n        if (!fs.existsSync(customPath)) {\n          customPath = item;\n          if (!fs.existsSync(customPath)) {\n            return done(new Error(customPath + \" does not exist!\"));\n          }\n        }\n        variablePaths.push(customPath);\n        sources.push(customPath);\n      }\n    }\n    stylePaths = [];\n    for (j = 0, len1 = styles.length; j < len1; j++) {\n      item = styles[j];\n      customPath = path.join(ROOT, 'styles', \"layout-\" + item + \".less\");\n      if (!fs.existsSync(customPath)) {\n        customPath = item;\n        if (!fs.existsSync(customPath)) {\n          return done(new Error(customPath + \" does not exist!\"));\n        }\n      }\n      stylePaths.push(customPath);\n      sources.push(customPath);\n    }\n    load = function(filename, loadDone) {\n      return fs.readFile(filename, 'utf-8', loadDone);\n    };\n    if (verbose) {\n      console.log(\"Using variables \" + variablePaths);\n      console.log(\"Using styles \" + stylePaths);\n      console.log(\"Checking cache \" + compiledPath);\n    }\n    return getCached(key, compiledPath, sources, load, function(err, css) {\n      var k, l, len2, len3, tmp;\n      if (err) {\n        return done(err);\n      }\n      if (css) {\n        if (verbose) {\n          console.log('Cached version loaded');\n        }\n        return done(null, css);\n      }\n      if (verbose) {\n        console.log('Not cached or out of date. Generating CSS...');\n      }\n      tmp = '';\n      for (k = 0, len2 = variablePaths.length; k < len2; k++) {\n        customPath = variablePaths[k];\n        tmp += \"@import \\\"\" + customPath + \"\\\";\\n\";\n      }\n      for (l = 0, len3 = stylePaths.length; l < len3; l++) {\n        customPath = stylePaths[l];\n        tmp += \"@import \\\"\" + customPath + \"\\\";\\n\";\n      }\n      benchmark.start('less-compile');\n      return less.render(tmp, {\n        compress: true\n      }, function(err, result) {\n        var writeErr;\n        if (err) {\n          return done(msgErr('Error processing LESS -> CSS', err));\n        }\n        try {\n          css = result.css;\n          fs.writeFileSync(compiledPath, css, 'utf-8');\n        } catch (_error) {\n          writeErr = _error;\n          return done(errMsg('Error writing cached CSS to file', writeErr));\n        }\n        benchmark.end('less-compile');\n        cache[key] = css;\n        return done(null, cache[key]);\n      });\n    });\n  };\n\n  compileTemplate = function(filename, options) {\n    var compiled;\n    return compiled = \"var jade = require('jade/runtime');\\n\" + (jade.compileFileClient(filename, options)) + \"\\nmodule.exports = compiledFunc;\";\n  };\n\n  getTemplate = function(name, verbose, done) {\n    var builtin, compiledPath, key, load;\n    builtin = path.join(ROOT, 'templates', name + \".jade\");\n    if (!fs.existsSync(name) && fs.existsSync(builtin)) {\n      name = builtin;\n    }\n    key = \"template-\" + name;\n    if (cache[key]) {\n      return done(null, cache[key]);\n    }\n    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + \".js\");\n    load = function(filename, loadDone) {\n      var loadErr, loaded;\n      try {\n        loaded = require(filename);\n      } catch (_error) {\n        loadErr = _error;\n        return loadDone(errMsg('Unable to load template', loadErr));\n      }\n      return loadDone(null, require(filename));\n    };\n    if (verbose) {\n      console.log(\"Using template \" + name);\n      console.log(\"Checking cache \" + compiledPath);\n    }\n    return getCached(key, compiledPath, [name], load, function(err, template) {\n      var compileErr, compileOptions, compiled, writeErr;\n      if (err) {\n        return done(err);\n      }\n      if (template) {\n        if (verbose) {\n          console.log('Cached version loaded');\n        }\n        return done(null, template);\n      }\n      if (verbose) {\n        console.log('Not cached or out of date. Generating template JS...');\n      }\n      benchmark.start('jade-compile');\n      compileOptions = {\n        filename: name,\n        name: 'compiledFunc',\n        self: true,\n        compileDebug: false\n      };\n      try {\n        compiled = compileTemplate(name, compileOptions);\n      } catch (_error) {\n        compileErr = _error;\n        return done(errMsg('Error compiling template', compileErr));\n      }\n      if (compiled.indexOf('self.') === -1) {\n        compileOptions.self = false;\n        try {\n          compiled = compileTemplate(name, compileOptions);\n        } catch (_error) {\n          compileErr = _error;\n          return done(errMsg('Error compiling template', compileErr));\n        }\n      }\n      try {\n        fs.writeFileSync(compiledPath, compiled, 'utf-8');\n      } catch (_error) {\n        writeErr = _error;\n        return done(errMsg('Error writing cached template file', writeErr));\n      }\n      benchmark.end('jade-compile');\n      cache[key] = require(compiledPath);\n      return done(null, cache[key]);\n    });\n  };\n\n  modifyUriTemplate = function(templateUri, parameters, colorize) {\n    var block, closeIndex, index, lastIndex, param, parameterBlocks, parameterNames, parameterSet, parameterValidator;\n    parameterValidator = function(b) {\n      return parameterNames.indexOf(querystring.unescape(b.replace(/^\\*|\\*$/, ''))) !== -1;\n    };\n    parameterNames = (function() {\n      var i, len, results;\n      results = [];\n      for (i = 0, len = parameters.length; i < len; i++) {\n        param = parameters[i];\n        results.push(param.name);\n      }\n      return results;\n    })();\n    parameterBlocks = [];\n    lastIndex = index = 0;\n    while ((index = templateUri.indexOf(\"{\", index)) !== -1) {\n      parameterBlocks.push(templateUri.substring(lastIndex, index));\n      block = {};\n      closeIndex = templateUri.indexOf(\"}\", index);\n      block.querySet = templateUri.indexOf(\"{?\", index) === index;\n      block.formSet = templateUri.indexOf(\"{&\", index) === index;\n      block.reservedSet = templateUri.indexOf(\"{+\", index) === index;\n      lastIndex = closeIndex + 1;\n      index++;\n      if (block.querySet || block.formSet || block.reservedSet) {\n        index++;\n      }\n      parameterSet = templateUri.substring(index, closeIndex);\n      block.parameters = parameterSet.split(\",\").filter(parameterValidator);\n      if (block.parameters.length) {\n        parameterBlocks.push(block);\n      }\n    }\n    parameterBlocks.push(templateUri.substring(lastIndex, templateUri.length));\n    return parameterBlocks.reduce(function(uri, v) {\n      var segment;\n      if (typeof v === \"string\") {\n        uri.push(v);\n      } else {\n        segment = !colorize ? [\"{\"] : [];\n        if (v.querySet) {\n          segment.push(\"?\");\n        }\n        if (v.formSet) {\n          segment.push(\"&\");\n        }\n        if (v.reservedSet && !colorize) {\n          segment.push(\"+\");\n        }\n        segment.push(v.parameters.map(function(name) {\n          if (!colorize) {\n            return name;\n          } else {\n            name = name.replace(/^\\*|\\*$/, '');\n            param = parameters[parameterNames.indexOf(querystring.unescape(name))];\n            if (v.querySet || v.formSet) {\n              return (\"<span class=\\\"hljs-attribute\\\">\" + name + \"=</span>\") + (\"<span class=\\\"hljs-literal\\\">\" + (param.example || '') + \"</span>\");\n            } else {\n              return \"<span class=\\\"hljs-attribute\\\" title=\\\"\" + name + \"\\\">\" + (param.example || name) + \"</span>\";\n            }\n          }\n        }).join(colorize ? '&' : ','));\n        if (!colorize) {\n          segment.push(\"}\");\n        }\n        uri.push(segment.join(\"\"));\n      }\n      return uri;\n    }, []).join('').replace(/\\/+/g, '/');\n  };\n\n  decorate = function(api, md, slugCache, verbose) {\n    var action, category, dataStructure, dataStructures, err, example, i, item, j, k, knownParams, l, len, len1, len2, len3, meta, name, newParams, param, ref, ref1, ref2, ref3, resource, resourceGroup, results, reversed, schema, slugify;\n    slugify = slug.bind(slug, slugCache);\n    dataStructures = {};\n    ref = api.content || [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      category = ref[i];\n      ref1 = category.content || [];\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        item = ref1[j];\n        if (item.element === 'dataStructure') {\n          dataStructure = item.content[0];\n          dataStructures[dataStructure.meta.id] = dataStructure;\n        }\n      }\n    }\n    if (verbose) {\n      console.log(\"Known data structures: \" + (Object.keys(dataStructures)));\n    }\n    if (api.description) {\n      api.descriptionHtml = md.render(api.description);\n      api.navItems = slugCache._nav;\n      slugCache._nav = [];\n    }\n    ref2 = api.metadata || [];\n    for (k = 0, len2 = ref2.length; k < len2; k++) {\n      meta = ref2[k];\n      if (meta.name === 'HOST') {\n        api.host = meta.value;\n      }\n    }\n    ref3 = api.resourceGroups || [];\n    results = [];\n    for (l = 0, len3 = ref3.length; l < len3; l++) {\n      resourceGroup = ref3[l];\n      resourceGroup.elementId = slugify(resourceGroup.name, true);\n      resourceGroup.elementLink = \"#\" + resourceGroup.elementId;\n      if (resourceGroup.description) {\n        resourceGroup.descriptionHtml = md.render(resourceGroup.description);\n        resourceGroup.navItems = slugCache._nav;\n        slugCache._nav = [];\n      }\n      results.push((function() {\n        var len4, m, ref4, results1;\n        ref4 = resourceGroup.resources || [];\n        results1 = [];\n        for (m = 0, len4 = ref4.length; m < len4; m++) {\n          resource = ref4[m];\n          resource.elementId = slugify(resourceGroup.name + \"-\" + resource.name, true);\n          resource.elementLink = \"#\" + resource.elementId;\n          results1.push((function() {\n            var len5, len6, n, o, ref5, results2;\n            ref5 = resource.actions || [];\n            results2 = [];\n            for (n = 0, len5 = ref5.length; n < len5; n++) {\n              action = ref5[n];\n              action.elementId = slugify(resourceGroup.name + \"-\" + resource.name + \"-\" + action.method, true);\n              action.elementLink = \"#\" + action.elementId;\n              action.methodLower = action.method.toLowerCase();\n              if (!(action.attributes || {}).uriTemplate) {\n                if (!action.parameters || !action.parameters.length) {\n                  action.parameters = resource.parameters;\n                } else if (resource.parameters) {\n                  action.parameters = resource.parameters.concat(action.parameters);\n                }\n              }\n              knownParams = {};\n              newParams = [];\n              reversed = (action.parameters || []).concat([]).reverse();\n              for (o = 0, len6 = reversed.length; o < len6; o++) {\n                param = reversed[o];\n                if (knownParams[param.name]) {\n                  continue;\n                }\n                knownParams[param.name] = true;\n                newParams.push(param);\n              }\n              action.parameters = newParams.reverse();\n              action.uriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters);\n              action.colorizedUriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters, true);\n              action.hasRequest = false;\n              results2.push((function() {\n                var len7, p, ref6, results3;\n                ref6 = action.examples || [];\n                results3 = [];\n                for (p = 0, len7 = ref6.length; p < len7; p++) {\n                  example = ref6[p];\n                  results3.push((function() {\n                    var len8, q, ref7, results4;\n                    ref7 = ['requests', 'responses'];\n                    results4 = [];\n                    for (q = 0, len8 = ref7.length; q < len8; q++) {\n                      name = ref7[q];\n                      results4.push((function() {\n                        var len10, len11, len9, r, ref10, ref8, ref9, results5, s, t;\n                        ref8 = example[name] || [];\n                        results5 = [];\n                        for (r = 0, len9 = ref8.length; r < len9; r++) {\n                          item = ref8[r];\n                          if (name === 'requests' && !action.hasRequest) {\n                            action.hasRequest = true;\n                          }\n                          if (!item.schema && item.content) {\n                            ref9 = item.content;\n                            for (s = 0, len10 = ref9.length; s < len10; s++) {\n                              dataStructure = ref9[s];\n                              if (dataStructure.element === 'dataStructure') {\n                                try {\n                                  schema = renderSchema(dataStructure.content[0], dataStructures);\n                                  schema['$schema'] = 'http://json-schema.org/draft-04/schema#';\n                                  item.schema = JSON.stringify(schema, null, 2);\n                                } catch (_error) {\n                                  err = _error;\n                                  if (verbose) {\n                                    console.log(JSON.stringify(dataStructure.content[0], null, 2));\n                                    console.log(err);\n                                  }\n                                }\n                              }\n                            }\n                          }\n                          if (item.content && !process.env.DRAFTER_EXAMPLES) {\n                            ref10 = item.content;\n                            for (t = 0, len11 = ref10.length; t < len11; t++) {\n                              dataStructure = ref10[t];\n                              if (dataStructure.element === 'dataStructure') {\n                                try {\n                                  item.body = JSON.stringify(renderExample(dataStructure.content[0], dataStructures), null, 2);\n                                } catch (_error) {\n                                  err = _error;\n                                  if (verbose) {\n                                    console.log(JSON.stringify(dataStructure.content[0], null, 2));\n                                    console.log(err);\n                                  }\n                                }\n                              }\n                            }\n                          }\n                          item.hasContent = item.description || Object.keys(item.headers).length || item.body || item.schema;\n                          try {\n                            if (item.body) {\n                              item.body = JSON.stringify(JSON.parse(item.body), null, 2);\n                            }\n                            if (item.schema) {\n                              results5.push(item.schema = JSON.stringify(JSON.parse(item.schema), null, 2));\n                            } else {\n                              results5.push(void 0);\n                            }\n                          } catch (_error) {\n                            err = _error;\n                            results5.push(false);\n                          }\n                        }\n                        return results5;\n                      })());\n                    }\n                    return results4;\n                  })());\n                }\n                return results3;\n              })());\n            }\n            return results2;\n          })());\n        }\n        return results1;\n      })());\n    }\n    return results;\n  };\n\n  exports.getConfig = function() {\n    return {\n      formats: ['1A'],\n      options: [\n        {\n          name: 'variables',\n          description: 'Color scheme name or path to custom variables',\n          \"default\": 'default'\n        }, {\n          name: 'condense-nav',\n          description: 'Condense navigation links',\n          boolean: true,\n          \"default\": true\n        }, {\n          name: 'full-width',\n          description: 'Use full window width',\n          boolean: true,\n          \"default\": false\n        }, {\n          name: 'template',\n          description: 'Template name or path to custom template',\n          \"default\": 'default'\n        }, {\n          name: 'style',\n          description: 'Layout style name or path to custom stylesheet'\n        }, {\n          name: 'emoji',\n          description: 'Enable support for emoticons',\n          boolean: true,\n          \"default\": true\n        }\n      ]\n    };\n  };\n\n  exports.render = function(input, options, done) {\n    var md, slugCache, themeStyle, themeVariables, verbose;\n    if (done == null) {\n      done = options;\n      options = {};\n    }\n    if (process.env.NOCACHE) {\n      cache = {};\n    }\n    if (options.condenseNav) {\n      options.themeCondenseNav = options.condenseNav;\n    }\n    if (options.fullWidth) {\n      options.themeFullWidth = options.fullWidth;\n    }\n    if (options.themeVariables == null) {\n      options.themeVariables = 'default';\n    }\n    if (options.themeStyle == null) {\n      options.themeStyle = 'default';\n    }\n    if (options.themeTemplate == null) {\n      options.themeTemplate = 'default';\n    }\n    if (options.themeCondenseNav == null) {\n      options.themeCondenseNav = true;\n    }\n    if (options.themeFullWidth == null) {\n      options.themeFullWidth = false;\n    }\n    if (options.themeTemplate === 'default') {\n      options.themeTemplate = path.join(ROOT, 'templates', 'index.jade');\n    }\n    slugCache = {\n      _nav: []\n    };\n    md = markdownIt({\n      html: true,\n      linkify: true,\n      typographer: true,\n      highlight: highlight\n    }).use(require('markdown-it-anchor'), {\n      slugify: function(value) {\n        var output;\n        output = \"header-\" + (slug(slugCache, value, true));\n        slugCache._nav.push([value, \"#\" + output]);\n        return output;\n      },\n      permalink: true,\n      permalinkClass: 'permalink'\n    }).use(require('markdown-it-checkbox')).use(require('markdown-it-container'), 'note').use(require('markdown-it-container'), 'warning');\n    if (options.themeEmoji) {\n      md.use(require('markdown-it-emoji'));\n    }\n    md.renderer.rules.code_block = md.renderer.rules.fence;\n    benchmark.start('decorate');\n    decorate(input, md, slugCache, options.verbose);\n    benchmark.end('decorate');\n    benchmark.start('css-total');\n    themeVariables = options.themeVariables, themeStyle = options.themeStyle, verbose = options.verbose;\n    return getCss(themeVariables, themeStyle, verbose, function(err, css) {\n      var key, locals, ref, value;\n      if (err) {\n        return done(errMsg('Could not get CSS', err));\n      }\n      benchmark.end('css-total');\n      locals = {\n        api: input,\n        condenseNav: options.themeCondenseNav,\n        css: css,\n        fullWidth: options.themeFullWidth,\n        date: moment,\n        hash: function(value) {\n          return crypto.createHash('md5').update(value.toString()).digest('hex');\n        },\n        highlight: highlight,\n        markdown: function(content) {\n          return md.render(content);\n        },\n        slug: slug.bind(slug, slugCache),\n        urldec: function(value) {\n          return querystring.unescape(value);\n        }\n      };\n      ref = options.locals || {};\n      for (key in ref) {\n        value = ref[key];\n        locals[key] = value;\n      }\n      benchmark.start('get-template');\n      return getTemplate(options.themeTemplate, verbose, function(getTemplateErr, renderer) {\n        var html;\n        if (getTemplateErr) {\n          return done(errMsg('Could not get template', getTemplateErr));\n        }\n        benchmark.end('get-template');\n        benchmark.start('call-template');\n        try {\n          html = renderer(locals);\n        } catch (_error) {\n          err = _error;\n          return done(errMsg('Error calling template during rendering', err));\n        }\n        benchmark.end('call-template');\n        return done(null, html);\n      });\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio-theme-olio/lib/example.js":"// Generated by CoffeeScript 1.9.3\n(function() {\n  var defaultValue, inherit, renderExample;\n\n  inherit = require('./inherit');\n\n  defaultValue = function(type) {\n    switch (type) {\n      case 'boolean':\n        return true;\n      case 'number':\n        return 1;\n      case 'string':\n        return 'Hello, world!';\n    }\n  };\n\n  module.exports = renderExample = function(root, dataStructures) {\n    var i, item, j, key, len, member, obj, properties, ref, ref1, results;\n    switch (root.element) {\n      case 'boolean':\n      case 'string':\n      case 'number':\n        if (root.content != null) {\n          return root.content;\n        } else {\n          return defaultValue(root.element);\n        }\n        break;\n      case 'enum':\n        return renderExample(root.content[0], dataStructures);\n      case 'array':\n        ref1 = root.content || [];\n        results = [];\n        for (j = 0, len = ref1.length; j < len; j++) {\n          item = ref1[j];\n          results.push(renderExample(item, dataStructures));\n        }\n        return results;\n        break;\n      case 'object':\n        obj = {};\n        properties = root.content.slice(0);\n        i = 0;\n        while (i < properties.length) {\n          member = properties[i];\n          i++;\n          if (member.element === 'ref') {\n            ref = dataStructures[member.content.href];\n            i--;\n            properties.splice.apply(properties, [i, 1].concat(ref.content));\n            continue;\n          } else if (member.element === 'select') {\n            member = member.content[0].content[0];\n          }\n          key = member.content.key.content;\n          obj[key] = renderExample(member.content.value, dataStructures);\n        }\n        return obj;\n      default:\n        ref = dataStructures[root.element];\n        if (ref) {\n          return renderExample(inherit(ref, root), dataStructures);\n        }\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio-theme-olio/lib/inherit.js":"// Generated by CoffeeScript 1.9.3\n(function() {\n  var uniqueMembers,\n    hasProp = {}.hasOwnProperty;\n\n  uniqueMembers = function(content) {\n    var i, key, known, results;\n    known = [];\n    i = content.length - 1;\n    results = [];\n    while (i >= 0) {\n      if (content[i].element === 'member') {\n        key = content[i].content.key.content;\n        if (known.indexOf(key) !== -1) {\n          content.splice(i, 1);\n          continue;\n        }\n        known.push(key);\n      }\n      results.push(i--);\n    }\n    return results;\n  };\n\n  module.exports = function(base, element) {\n    var combined, item, j, key, len, ref, ref1, ref2, ref3, ref4, value;\n    combined = JSON.parse(JSON.stringify(base));\n    if (element.meta) {\n      if (combined.meta == null) {\n        combined.meta = {};\n      }\n      ref = element.meta;\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        combined.meta[key] = value;\n      }\n    }\n    if (element.attributes) {\n      if (combined.attributes == null) {\n        combined.attributes = {};\n      }\n      ref1 = element.attributes;\n      for (key in ref1) {\n        if (!hasProp.call(ref1, key)) continue;\n        value = ref1[key];\n        combined.attributes[key] = value;\n      }\n    }\n    if (element.content) {\n      if (((ref2 = combined.content) != null ? ref2.push : void 0) || ((ref3 = element.content) != null ? ref3.push : void 0)) {\n        if (combined.content == null) {\n          combined.content = [];\n        }\n        ref4 = element.content;\n        for (j = 0, len = ref4.length; j < len; j++) {\n          item = ref4[j];\n          combined.content.push(item);\n        }\n        if (combined.content.length && combined.content[0].element === 'member') {\n          uniqueMembers(combined.content);\n        }\n      } else {\n        combine.content = element.content;\n      }\n    }\n    return combined;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-aglio/node_modules/aglio-theme-olio/lib/schema.js":"// Generated by CoffeeScript 1.9.3\n(function() {\n  var deepEqual, inherit, renderSchema;\n\n  deepEqual = require('assert').deepEqual;\n\n  inherit = require('./inherit');\n\n  module.exports = renderSchema = function(root, dataStructures) {\n    var exclusive, i, item, items, j, k, key, len, len1, len2, m, member, option, optionSchema, prop, properties, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, required, schema, typeAttr;\n    schema = {};\n    switch (root.element) {\n      case 'boolean':\n      case 'string':\n      case 'number':\n        schema.type = root.element;\n        if (((ref1 = root.attributes) != null ? ref1[\"default\"] : void 0) != null) {\n          schema[\"default\"] = root.attributes[\"default\"];\n        }\n        break;\n      case 'enum':\n        schema[\"enum\"] = [];\n        ref2 = root.content || [];\n        for (j = 0, len = ref2.length; j < len; j++) {\n          item = ref2[j];\n          schema[\"enum\"].push(item.content);\n        }\n        break;\n      case 'array':\n        schema.type = 'array';\n        items = [];\n        ref3 = root.content || [];\n        for (k = 0, len1 = ref3.length; k < len1; k++) {\n          item = ref3[k];\n          items.push(renderSchema(item, dataStructures));\n        }\n        if (items.length === 1) {\n          schema.items = items[0];\n        } else if (items.length > 1) {\n          try {\n            schema.items = items.reduce(function(l, r) {\n              return deepEqual(l, r) || r;\n            });\n          } catch (_error) {\n            schema.items = {\n              'anyOf': items\n            };\n          }\n        }\n        break;\n      case 'object':\n      case 'option':\n        schema.type = 'object';\n        schema.properties = {};\n        required = [];\n        properties = root.content.slice(0);\n        i = 0;\n        while (i < properties.length) {\n          member = properties[i];\n          i++;\n          if (member.element === 'ref') {\n            ref = dataStructures[member.content.href];\n            i--;\n            properties.splice.apply(properties, [i, 1].concat(ref.content));\n            continue;\n          } else if (member.element === 'select') {\n            exclusive = [];\n            ref4 = member.content;\n            for (m = 0, len2 = ref4.length; m < len2; m++) {\n              option = ref4[m];\n              optionSchema = renderSchema(option, dataStructures);\n              ref5 = optionSchema.properties;\n              for (key in ref5) {\n                prop = ref5[key];\n                exclusive.push(key);\n                schema.properties[key] = prop;\n              }\n            }\n            if (!schema.allOf) {\n              schema.allOf = [];\n            }\n            schema.allOf.push({\n              not: {\n                required: exclusive\n              }\n            });\n            continue;\n          }\n          key = member.content.key.content;\n          schema.properties[key] = renderSchema(member.content.value, dataStructures);\n          if (((ref6 = member.meta) != null ? ref6.description : void 0) != null) {\n            schema.properties[key].description = member.meta.description;\n          }\n          if ((ref7 = member.attributes) != null ? ref7.typeAttributes : void 0) {\n            typeAttr = member.attributes.typeAttributes;\n            if (typeAttr.indexOf('required') !== -1) {\n              if (required.indexOf(key) === -1) {\n                required.push(key);\n              }\n            }\n            if (typeAttr.indexOf('nullable') !== -1) {\n              schema.properties[key].type = [schema.properties[key].type, 'null'];\n            }\n          }\n        }\n        if (required.length) {\n          schema.required = required;\n        }\n        break;\n      default:\n        ref = dataStructures[root.element];\n        if (ref) {\n          schema = renderSchema(inherit(ref, root), dataStructures);\n        }\n    }\n    if (((ref8 = root.meta) != null ? ref8.description : void 0) != null) {\n      schema.description = root.meta.description;\n    }\n    if ((ref9 = root.attributes) != null ? ref9.typeAttributes : void 0) {\n      typeAttr = root.attributes.typeAttributes;\n      if (typeAttr.indexOf('nullable') !== -1) {\n        schema.type = [schema.type, 'null'];\n      }\n    }\n    return schema;\n  };\n\n}).call(this);\n"}